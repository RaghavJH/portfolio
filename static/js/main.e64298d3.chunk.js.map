{"version":3,"sources":["assets/img/0.jpg","assets/resume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","className","ProfilePic","height","width","src","profile","alt","Name","Languages","ResumeButton","href","resume","target","rel","class","Description","Socials","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,oC,yLCKrCC,G,MAAY,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACnB,OACC,yBAAKC,UAAU,uCACd,yBAAKA,UAAU,WACbD,MAMCE,EAAa,WAClB,OACC,6BACC,yBACAD,UAAU,eACVE,OAAO,OACPC,MAAM,OACNC,IAAKC,IACLC,IAAI,SAKDC,EAAO,WACZ,OACC,yBAAKP,UAAU,QACd,+CAKGQ,EAAY,WACjB,OAAO,2FAGFC,EAAe,WACpB,OACC,uBAAGC,KAAMC,IAAQC,OAAO,SAASC,IAAI,uBACrC,4BACAb,UAAU,8IADV,eAIa,uBAAGc,MAAM,0BAMlBC,EAAc,SAAC,GAAgB,IAAfhB,EAAc,EAAdA,SACrB,OACC,yBAAKC,UAAU,sBACd,2BAAID,KAKDiB,EAAU,WACf,OACC,6BACC,uBAAGN,KAAK,8BAA8BE,OAAO,SAASC,IAAI,uBACzD,uBAAGb,UAAU,+BAEd,uBAAGU,KAAK,uDAAuDE,OAAO,SAASC,IAAI,uBAClF,uBAAGC,MAAM,0BAEV,uBAAGJ,KAAK,2BAA2BE,OAAO,SAASC,IAAI,uBACtD,uBAAGb,UAAU,iCAEd,uBAAGU,KAAK,oCAAoCE,OAAO,SAASC,IAAI,uBAC/D,uBAAGb,UAAU,gCAEd,uBAAGU,KAAK,6BAA6BE,OAAO,SAASC,IAAI,uBACxD,uBAAGb,UAAU,sBAqBFiB,MAff,WACE,OACD,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,iEACqD,8BAErD,kBAAC,EAAD,QCjFkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e64298d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.0cdf7694.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resume.418e99f2.pdf\";","import React from 'react';\nimport profile from './assets/img/0.jpg';\nimport resume from './assets/resume.pdf'\nimport './assets/css/App.css';\n\nconst Container = ({children}) => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center h-screen\">\n\t\t\t<div className=\"my-auto\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst ProfilePic = () => {\n\treturn (\n\t\t<div>\n\t\t\t<img \n\t\t\tclassName=\"rounded-full\" \n\t\t\theight=\"75px\" \n\t\t\twidth=\"75px\" \n\t\t\tsrc={profile} \n\t\t\talt=\"Me\" />\n\t\t</div>\n\t);\n}\n\nconst Name = () => {\n\treturn (\n\t\t<div className=\"mt-5\">\n\t\t\t<h1>Raghav Jhavar</h1>\n\t\t</div>\n\t);\n}\n\nconst Languages = () => {\n\treturn <p>Languages: Go, Java, Python, PHP, C#, JavaScript, HTML, CSS</p>\n}\n\nconst ResumeButton = () => {\n\treturn (\n\t\t<a href={resume} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<button \n\t\tclassName=\"transition duration-500 ease-in-out\n\t\tbg-black text-white font-bold transform hover:scale-110 py-2 px-3 rounded-full mt-2 focus:outline-none\"\n\t\t>\n\t\t\tView Resume <i class=\"fas fa-arrow-right\"></i>\n\t\t</button>\n\t\t</a>\t\t\t\n\t);\n}\n\nconst Description = ({children}) => {\n\treturn (\n\t\t<div className=\"max-w-md mt-3 mb-3\">\n\t\t\t<p>{children}</p>\n\t\t</div>\n\t);\n}\n\nconst Socials = () => {\n\treturn (\n\t\t<div>\n\t\t\t<a href=\"https://github.com/RaghavJH\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t<i className=\"fab fa-github-square mr-2\" />\n\t\t\t</a>\n\t\t\t<a href=\"https://www.linkedin.com/in/raghav-jhavar-399213149/\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t<i class=\"fab fa-linkedin mr-2\" />\n\t\t\t</a>\n\t\t\t<a href=\"mailto:raghav@jhavar.net\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t<i className=\"fas fa-envelope-square mr-2\" />\n\t\t\t</a>\t\t\t\n\t\t\t<a href=\"https://twitter.com/raghav_jhavar\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t<i className=\"fab fa-twitter-square mr-2\" />\n\t\t\t</a>\n\t\t\t<a href=\"https://discord.gg/EbEp4Ak\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t<i className=\"fab fa-discord\" />\n\t\t\t</a>\t\t\n\t\t</div>\n\t);\n}\n\nfunction App() {\n  return (\n\t<Container>\n\t\t<ProfilePic />\n\t\t<Name />\n\t\t<Languages />\n\t\t<ResumeButton />\n\t\t<Description>\n\t\t\t3rd year Computer Science Major â€¢ UBC Okanagan, 2021<br />\n\t\t</Description>\n\t\t<Socials />\n\t</Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}